<html><head>

<link rev="MADE" href="mailto:info@mail.kab-studio.biz">
<meta http-equiv="Content-Type" content="text/html; charset=Shift_JIS">
<title>ローカルフック</title>

<!-- 行間を空けるためのＣＳＳです。 -->
<style type="text/css">
<!--
.txt0 {
	line-height:130%;
	}
-->
</style>




</head>
<body topmargin="0" leftmargin="0" bgcolor="#FFFFFF" link="000099" text="#000055" vlink="#0000FF">


	<div align="CENTER">
<script type="text/javascript"><!--
google_ad_client = "pub-4981303648623996";
google_ad_width = 728;
google_ad_height = 90;
google_ad_format = "728x90_as";
google_ad_channel ="";
//--></script>
<script type="text/javascript" src="%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%83%95%E3%83%83%E3%82%AF_files/show_ads.js">
</script>
	</div>



	<div align="RIGHT">
<!-- Next and Prev
　ＪＡＶＡスクリプトを使って、次のＵＲＬを計算させます。
-->
＜<a href="http://www.kab-studio.biz/Programing/Codian/DLL_Hook_SClass/06.html">前</a>｜<a href="http://www.kab-studio.biz/Programing/Codian/DLL_Hook_SClass/08.html">次</a>＞
	</div>



	<center>
	<font color="#FF0000" size="5">
	<strong>
　<br>
<!-- Write title.
　タイトルと同じ文字を書き込みます。
-->
ローカルフック
	</strong>
	</font>
	</center>
<p>

	</p><center>
	<table cellpadding="0" cellspacing="0" border="0">
	<tbody><tr>
	<td align="LEFT" valign="TOP" width="600">
	<div class="txt0">
<!-- 本文スタート -->

　今回はフックの実践編ということで、ローカルフックを使ってみましょう。実際にシステムフックを使いたい場合でも、デバッグ等の問題からローカルフックでチェックしてから使用した方が楽なので、まずはこちらをマスターしておいてください。<br>

	</div>
	</td>
	</tr>
	</tbody></table>
	<p>	
	<table cellpadding="0" cellspacing="0" border="0">
	<tbody><tr>
	<td align="LEFT" valign="TOP" width="600">
	<div class="txt0">
	<font color="#FF0000" size="4">
	<strong>
フッククラスの作製<br>
	</strong>
	</font>

　今回、「フックをコントロールするクラス」を作製します。実際にはクラスを作る必要はないのですが、クラスとして作製すると、システムフックとして使う時にＤＬＬに移行するのが簡単にできてしまうので、フック用のクラスを作製してしまいましょう。<br>
　また、今回使用するフックは<strong>キーボードフック</strong>にします。標準的なフックで、使い道も多いでしょう。今回は「キーをインクリメントする」フックを作製します。Ａを入力したらＢが出てくる、みたいな感じです。<br>
<p>
　ではさっそく作製しましょう。今回作製するプロジェクトは<strong>ダイアログ</strong>にします。で、そのダイアログに<strong>エディットボックス</strong>をひとつ貼り付けてください。ＩＤなんかはほったらかしで構いません。ただあればいいんです。<br>
　そのあと、「ワークスペース」の<strong>「クラスビュー」</strong>を表示し、<strong>「＊ クラス」</strong>（＊はプロジェクト名）で右クリックし、出てきたメニューの<strong>「クラスの新規作製」</strong>を選んでください。<br>
　表示されたダイアログの一番上、「クラスの種類」で<strong>「Generic クラス」</strong>を選んでください。こちらに選択しないと、ＭＦＣからの継承クラスを作ることになってしまいます。<br>
　そのあと<strong>「クラス名」</strong>に<strong>CKeyboardHook</strong>と入力して、「ＯＫ」ボタンを押してください。これで新しくクラスが作製されるはずです。<br>

	</p></div>
	</td>
	</tr>
	</tbody></table>
	</p><p>	
	<table cellpadding="0" cellspacing="0" border="0">
	<tbody><tr>
	<td align="LEFT" valign="TOP" width="600">
	<div class="txt0">
	<font color="#FF0000" size="4">
	<strong>
フックを使用する手順<br>
	</strong>
	</font>

　これからプログラムを組んでいくわけですが、その前に「フックの掛け方」を見ておきましょう。<br>
<p>
　まず、<font color="#0000FF"><strong>SetWindowsHookEx()</strong></font>を使用してフックをセットします。このとき、フックのタイプと、横取りしたメッセージを受け取る<strong>フックプロシージャ</strong>へのポインタを指定します。この関数は<strong>フックハンドル</strong>を返すのでこれを取っておきます。<br>
　実は、フックのセットそのものはこれだけです。簡単ですね。<br>
　そのあと、<font color="#0000FF"><strong>フックプロシージャ</strong></font>にメッセージが送られてきますから、フックプロシージャでしたい処理を行えばＯＫです。<br>
　最後に、<font color="#0000FF"><strong>UnhookWindowsHookEx()</strong></font>を使用してフックを外します。このとき、取っておいたフックハンドルを使用します。この処理は、アプリケーションを終了する前に必ず行ってください。<br>
</p><p>
　この３つをクラスにインプリメントすれば、クラスの完成ということになります。では、順を追って説明していきましょう。<br>

	</p></div>
	</td>
	</tr>
	</tbody></table>
	</p><p>	
	<table cellpadding="0" cellspacing="0" border="0">
	<tbody><tr>
	<td align="LEFT" valign="TOP" width="600">
	<div class="txt0">
	<font color="#FF0000" size="4">
	<strong>
フックのセット<br>
	</strong>
	</font>

　ではセットするメンバ関数を作製しましょう。クラスビューの<strong>CKeyboardHook</strong>で右クリック、<strong>「メンバ関数の追加」</strong>ダイアログを開き、次の関数を作製してください。<br>




<!-- 表 -->
	</div>
	</td>
	</tr>
	</tbody></table>
</p><p>
	<table cellpadding="0" cellspacing="0" border="0">
	<tbody><tr>
	<td align="CENTER" bgcolor="#FFCCCC" height="80" valign="MIDDLE" width="320">
		 
		 <table cellpadding="0" cellspacing="3" border="0">
		 
		 

		<tbody><tr>
		<td align="CENTER" bgcolor="#FFFFCC" height="30" valign="MIDDLE" width="100">
		<font color="#0000FF" size="2">
関数の型
		</font>
		</td>

		<td align="CENTER" bgcolor="#FFFFCC" height="30" valign="MIDDLE" width="100">
		<font color="#0000FF" size="2">
関数の宣言
		</font>
		</td>

		<td align="CENTER" bgcolor="#FFFFCC" height="30" valign="MIDDLE" width="100">
		<font color="#0000FF" size="2">
アクセス制御
		</font>
		</td>
		</tr>

<!-- さかいめ -->
		<tr>
		<td align="CENTER" bgcolor="#FFFFFF" height="30" valign="MIDDLE" width="100">
		<font color="#0000FF" size="2">
BOOL
		</font>
		</td>

		<td align="CENTER" bgcolor="#FFFFFF" height="30" valign="MIDDLE" width="100">
		<font color="#0000FF" size="2">
Set()
		</font>
		</td>

		<td align="CENTER" bgcolor="#FFFFFF" height="30" valign="MIDDLE" width="100">
		<font color="#0000FF" size="2">
Public
		</font>
		</td>
		</tr>

		</tbody></table>

	</td>
	</tr>
	</tbody></table>
</p><p>
	<table cellpadding="0" cellspacing="0" border="0">
	<tbody><tr>
	<td align="LEFT" valign="TOP" width="600">
	<div class="txt0">
<!-- 表　おわり -->

　このメンバ関数は外から呼び出すもの（いわゆる「メソッド」）なので<strong>Public</strong>にします。引数がないのは心配でしょうが、大丈夫です。<br>
　さて、作製した関数に次のようなコードを書き込んでください。<br>


<!-- コード -->
	</div>
	</td>
	</tr>
	</tbody></table>
	</p></center>
	<p>
	<font color="#0000FF">
	</font></p><pre><!-- コード開始 --><font color="#0000FF">
BOOL CKeyboardHook::Set()
{
	m_hHook = ::SetWindowsHookEx( WH_KEYBOARD
			, (HOOKPROC)CKeyboardHook::KeyboardProc
			, NULL, 0 );

	if( !m_hHook )
		return FALSE;

	return TRUE;
}
	</font></pre><font color="#0000FF">		<!-- コード　ここまで -->
	</font>
	<p>
	</p><center>
	<table cellpadding="0" cellspacing="0" border="0">
	<tbody><tr>
	<td align="LEFT" valign="TOP" width="600">
	<div class="txt0">
<!-- コード　おわり -->

　<strong>SetWindowsHookEx()</strong>はフックをセットするＡＰＩです。たったこれだけでフックをセットできます。<br>
　第１引数には<strong>フックのタイプ</strong>を指定します。今回はキーボードフックを使用するのでそのフラグを使っています。他のフラグについては前回とこのＡＰＩのリファレンスを読んでください。<br>
　第２引数には<strong>フックプロシージャへのポインタ</strong>を指定します。これはあとで作るものです。<br>
　第３引数には、ローカルフックでは<strong>NULL</strong>を渡します。システムフックを使う時に改めて説明します。<br>
　第４引数にはセットする<strong>スレッドのＩＤ</strong>を指定しますが、マルチスレッドを使用していないのならカレントスレッドだけなので、０を指定しちゃって構いません。<br>

	<font color="#FF0000" size="2"><strong>
（注： Win NT / 2K でローカルフックをセットする場合には、第４引数にカレントのスレッドＩＤを指定する必要があるみたいです。 API 
の場合には GetWindowThreadProcessId() の戻り値を渡せばＯＫ。 MFC の場合には 
AfxGetApp()-&gt;m_nThreadID を渡せばＯＫ。 SetWindowsHookEx() 
が失敗する、という方はお試しあれ。）<br>
	</strong></font>


	</div>
	</td>
	</tr>
	</tbody></table>
	<p>	
	<table cellpadding="0" cellspacing="0" border="0">
	<tbody><tr>
	<td align="LEFT" valign="TOP" width="600">
	<div class="txt0">
	<font color="#FF0000" size="4">
	<strong>
フックハンドルの保存<br>
	</strong>
	</font>


　で、このＡＰＩの戻り値は<strong>フックハンドル</strong>と呼ばれるものです。まぁお察しの通り、フックを操作するためのハンドルです。これが<strong>NULL</strong>のときには失敗なので、<strong>FALSE</strong>を返すようにしています。<br>
　この<strong>m_hHook</strong>をまだ作っていなかったので、今作りましょう。メンバ関数を作ったときと同じようにクラスビューの<strong>CKeyboardHook</strong>で右クリック、<strong>「メンバ変数の追加」</strong>ダイアログを開き、次の変数を作製してください。<br>


<!-- 表 -->
	</div>
	</td>
	</tr>
	</tbody></table>
</p><p>
	<table cellpadding="0" cellspacing="0" border="0">
	<tbody><tr>
	<td align="CENTER" bgcolor="#FFCCCC" height="80" valign="MIDDLE" width="320">
		 
		 <table cellpadding="0" cellspacing="3" border="0">
		 
		 

		<tbody><tr>
		<td align="CENTER" bgcolor="#FFFFCC" height="30" valign="MIDDLE" width="100">
		<font color="#0000FF" size="2">
変数の型
		</font>
		</td>

		<td align="CENTER" bgcolor="#FFFFCC" height="30" valign="MIDDLE" width="100">
		<font color="#0000FF" size="2">
変数の宣言
		</font>
		</td>

		<td align="CENTER" bgcolor="#FFFFCC" height="30" valign="MIDDLE" width="100">
		<font color="#0000FF" size="2">
アクセス制御
		</font>
		</td>
		</tr>

<!-- さかいめ -->
		<tr>
		<td align="CENTER" bgcolor="#FFFFFF" height="30" valign="MIDDLE" width="100">
		<font color="#0000FF" size="2">
HHOOK
		</font>
		</td>

		<td align="CENTER" bgcolor="#FFFFFF" height="30" valign="MIDDLE" width="100">
		<font color="#0000FF" size="2">
m_hHook
		</font>
		</td>

		<td align="CENTER" bgcolor="#FFFFFF" height="30" valign="MIDDLE" width="100">
		<font color="#0000FF" size="2">
Private
		</font>
		</td>
		</tr>

		</tbody></table>

	</td>
	</tr>
	</tbody></table>
</p><p>
	<table cellpadding="0" cellspacing="0" border="0">
	<tbody><tr>
	<td align="LEFT" valign="TOP" width="600">
	<div class="txt0">
<!-- 表　おわり -->

　フックハンドルへはメソッドを介してのみ操作できるようにするため、<strong>Private</strong>にしておきます。無理矢理フックハンドルを<strong>NULL</strong>になんてされたらたまったものじゃないですから。<br>
　で、実はこれだけではありません。<strong>CKeyboardHookクラス</strong>の宣言部を、次のように書き換えてください。<br>


<!-- コード -->
	</div>
	</td>
	</tr>
	</tbody></table>
	</p></center>
	<p>
	<font color="#0000FF">
	</font></p><pre><!-- コード開始 --><font color="#0000FF">
	static HHOOK m_hHook;	//static を書き加えてください。
	</font></pre><font color="#0000FF">		<!-- コード　ここまで -->
	</font>
	<p>
	</p><center>
	<table cellpadding="0" cellspacing="0" border="0">
	<tbody><tr>
	<td align="LEFT" valign="TOP" width="600">
	<div class="txt0">
<!-- コード　おわり -->

　さらに、<strong>KeyboardHook.cpp</strong>の最初の方（コンストラクタの手前くらい）に、次のコードを書き込んでください。<br>

<!-- コード -->
	</div>
	</td>
	</tr>
	</tbody></table>
	</center>
	<p>
	<font color="#0000FF">
	</font></p><pre><!-- コード開始 --><font color="#0000FF">
HHOOK	CKeyboardHook::m_hHook = NULL;
	</font></pre><font color="#0000FF">		<!-- コード　ここまで -->
	</font>
	<p>
	</p><center>
	<table cellpadding="0" cellspacing="0" border="0">
	<tbody><tr>
	<td align="LEFT" valign="TOP" width="600">
	<div class="txt0">
<!-- コード　おわり -->

　このフックハンドルを格納する変数は<strong>スタティック変数</strong>として宣言します。次に作製するフックプロシージャをスタティック関数として作製しなければならないため、このような形で宣言します。この実装方法だと、同じクラスで複数のフックをセットできないので注意してください。<br>
　さて、以上でセットする部分は終わり。次はフックプロシージャを作製しましょう。<br>


	</div>
	</td>
	</tr>
	</tbody></table>
	<p>	
	<table cellpadding="0" cellspacing="0" border="0">
	<tbody><tr>
	<td align="LEFT" valign="TOP" width="600">
	<div class="txt0">
	<font color="#FF0000" size="4">
	<strong>
フックプロシージャ<br>
	</strong>
	</font>

　フックプロシージャは、横取りしたメッセージを受け取るための関数で、ウィンドウプロシージャのような書式にする必要があります。また、フックプロシー
ジャはフックのタイプによって引数の解釈が違ってきます。その辺は各フックプロシージャのリファレンスを読んでください。<br>
<p>
<img src="%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%83%95%E3%83%83%E3%82%AF_files/0701.gif" alt="キーボードプロシージャ" align="RIGHT" border="0" height="210" width="320">

　今回はキーボードプロシージャを作製します。キーボードプロシージャの場合、<strong>WM_KEYDOWN</strong>か<strong>WM_KEYUP</strong>がメッセージキューの先頭にあるときに<strong>GetMessage()</strong>か<strong>PeekMessage()</strong>が呼び出される直前にウィンドウズから呼び出されます（ただ、「実際にキーを押したとき」に限るらしく、<strong>PostMessage()</strong>で送ったものはフックプロシージャが呼ばれません）。<br>
　フックプロシージャには<strong>「どんなキーを押したか」</strong>などの情報が送られてくるため、その情報を元に適当な処理をします。また、キューからそのメッセージを削除するか、それとも残しておくかを戻り値によって変えることができます。<br>
　フックプロシージャから抜けると、<strong>GetMessage()</strong>等は思い出したようにキューからメッセージを取り出して、そのままプログラムが進んでいきます。<br>
</p><p>
　この辺の状態は、フックプロシージャによって完全に違います。上の状況はＳＤＫベースでメッセージループを作ってチェックしたものです。なかなかテストは大変だと思いますのでご注意を。<br>
</p><p>
　では、例によって<strong>「メンバ関数の追加」</strong>ダイアログを開き、次の関数を作製してください。<br>






<!-- 表 -->
	</p></div>
	</td>
	</tr>
	</tbody></table>
</p><p>
	<table cellpadding="0" cellspacing="0" border="0">
	<tbody><tr>
	<td align="CENTER" bgcolor="#FFCCCC" height="100" valign="MIDDLE" width="620">
		 
		 <table cellpadding="0" cellspacing="3" border="0">
		 
		 

		<tbody><tr>
		<td align="CENTER" bgcolor="#FFFFCC" height="40" valign="MIDDLE" width="150">
		<font color="#0000FF" size="2">
関数の型
		</font>
		</td>

		<td align="CENTER" bgcolor="#FFFFCC" height="40" valign="MIDDLE" width="250">
		<font color="#0000FF" size="2">
関数の宣言
		</font>
		</td>

		<td align="CENTER" bgcolor="#FFFFCC" height="40" valign="MIDDLE" width="100">
		<font color="#0000FF" size="2">
アクセス制御
		</font>
		</td>

		<td align="CENTER" bgcolor="#FFFFCC" height="40" valign="MIDDLE" width="100">
		<font color="#0000FF" size="2">
その他
		</font>
		</td>
		</tr>

<!-- さかいめ -->
		<tr>
		<td align="CENTER" bgcolor="#FFFFFF" height="40" valign="MIDDLE" width="150">
		<font color="#0000FF" size="2">
LRESULT CALLBACK
		</font>
		</td>

		<td align="CENTER" bgcolor="#FFFFFF" height="40" valign="MIDDLE" width="250">
		<font color="#0000FF" size="2">
KeyboardProc( int p_nCode, WPARAM p_wParam, LPARAM p_lParam )
		</font>
		</td>

		<td align="CENTER" bgcolor="#FFFFFF" height="40" valign="MIDDLE" width="100">
		<font color="#0000FF" size="2">
Private
		</font>
		</td>

		<td align="CENTER" bgcolor="#FFFFFF" height="40" valign="MIDDLE" width="100">
		<font color="#0000FF" size="2">
Static
		</font>
		</td>
		</tr>

		</tbody></table>

	</td>
	</tr>
	</tbody></table>
</p><p>
	<table cellpadding="0" cellspacing="0" border="0">
	<tbody><tr>
	<td align="LEFT" valign="TOP" width="600">
	<div class="txt0">
<!-- 表　おわり -->

　ひとつずつ順に追っていきましょう。<br>
　まず戻り値の型ですが、<strong>LRESULT</strong>はウィンドウプロシージャやフックプロシージャが返す戻り値の型で、単なる３２ビット整数（<strong>DWORD</strong>）です。<strong>CALLBACK</strong>もプロシージャ系には必要なもので、<strong>ウィンドウズから呼び出される関数</strong>に付けます。といってもこれも単に<strong>__stdcall</strong>のことです（「ＤＬＬを作ろう！（関数編）」の装飾名を参考にしてください）。<br>
　関数名は別に<strong>決まってません</strong>が、キーボードフックプロシージャのリファレンスを簡単に見るために、同名にしておきました。あと引数の数と型は一致していなければなりません。でもフックプロシージャはすべて同じです。<br>
　この関数は<strong>CKeyboardHook::Set()</strong>からしか呼び出されないので<strong>Private</strong>にしておきます（ウィンドウズから呼び出される関数がPrivateっていうのも変な話ですが）。<br>
<p>
　重要なのは、この関数も<strong>スタティック</strong>だということです。通常、クラスのメンバ関数は宣言された変数ごとに違ってくるため、メンバ関数のアドレスは特定されておらず、当然<strong>SetWindowsHookEx()</strong>へと渡すこともできません。<br>
　ですが、スタティック関数の場合にはそのクラスの変数すべてが同じコードを使用するので、アドレスが決まっています。というわけで、スタティック変数なら<strong>SetWindowsHookEx()</strong>というわけです。<br>
　この関係でフックハンドルもスタティック変数になったというわけですが、この辺はシステムフックにしたときにいい方に転がるので、気にしないでください。<br>
　ちなみにこの辺がイヤな方は、フックハンドルはグローバル変数に、フックプロシージャは普通のＣ言語タイプの関数にしてください。<br>
</p><p>
　さて、ではフックプロシージャにコードを書き込んでみましょう。<br>


<!-- コード -->
	</p></div>
	</td>
	</tr>
	</tbody></table>
	</p></center>
	<p>
	<font color="#0000FF">
	</font></p><pre><!-- コード開始 --><font color="#0000FF">
LRESULT CALLBACK CKeyboardHook::KeyboardProc(int p_nCode, WPARAM p_wParam, LPARAM p_lParam)
{
	if( p_nCode &lt; 0 || p_nCode == HC_NOREMOVE )
		return ::CallNextHookEx( m_hHook, p_nCode, p_wParam, p_lParam );

	UINT	uiMsg;

	if( p_lParam &amp; 0x80000000 )
		uiMsg = WM_KEYUP;
	else
		uiMsg = WM_KEYDOWN;

	++p_wParam;
	::PostMessage( ::GetFocus(), uiMsg, p_wParam, p_lParam );
	::CallNextHookEx( m_hHook, p_nCode, p_wParam, p_lParam );

	return TRUE;
}
	</font></pre><font color="#0000FF">		<!-- コード　ここまで -->
	</font>
	<p>
	</p><center>
	<table cellpadding="0" cellspacing="0" border="0">
	<tbody><tr>
	<td align="LEFT" valign="TOP" width="600">
	<div class="txt0">
<!-- コード　おわり -->

　このフックプロシージャの処理はとても重要です。順を追って見ていきましょう。<br>
　まず<strong>p_nCode</strong>の値をチェックします。この場合は、<strong>CallNextHookEx()</strong>を読んでフックプロシージャからすぐ抜けてしまいます。つまりこれは<strong>何もしない</strong>ということです。<br>
<p>
　この値が負の場合、送られてきたメッセージは「このフックプロシージャでは<strong>処理してはいけません</strong>」という意味です。そのため、素通りさせます。<br>
　また、<strong>HC_NOREMOVE</strong>は、このフックプロシージャが<strong>PeekMessage()</strong>から呼ばれ、かつ<strong>PM_NOREMOVE</strong>のフラグが立てられていることを意味します。<br>
　キーボードフックは、<strong>GetMessage()</strong>か<strong>PeekMessage()</strong>が呼ばれ、メッセージをキューから取り込んだときにそのメッセージを横取りするフックです。<br>
　<strong>PeekMessage()</strong>でメッセージを取り出したとき、この第５引数に<strong>PM_NOREMOVE</strong>を渡すと、<strong>キューからメッセージを取り除かず</strong>、単に今どのメッセージがあるのかチェックするだけになります。<br>
　これは「メッセージがないとき」の処理をするためのシステムで、普通にメッセージがある場合なら必ずそのあとで<strong>GetMessage()</strong>等が呼ばれ、ちゃんとメッセージが処理されるはずです。というわけで、<strong>HC_NOREMOVE</strong>の立ったメッセージを処理してしまうと、同じメッセージを何度も処理してしまう可能性が出てくるので、この場合にはメッセージを素通りさせるというわけです。まとめると……<br>




<!-- 表 -->
	</p></div>
	</td>
	</tr>
	</tbody></table>
<p>
	<table cellpadding="0" cellspacing="0" border="0">
	<tbody><tr>
	<td align="CENTER" bgcolor="#FFCCCC" height="140" valign="MIDDLE" width="520">
		 
		 <table cellpadding="0" cellspacing="3" border="0">
		 
		 

		<tbody><tr>
		<td align="CENTER" bgcolor="#FFFFCC" height="40" valign="MIDDLE" width="200">
		<font color="#0000FF" size="2">
判定
		</font>
		</td>

		<td align="CENTER" bgcolor="#FFFFCC" height="40" valign="MIDDLE" width="300">
		<font color="#0000FF" size="2">
意味
		</font>
		</td>

		</tr>

<!-- さかいめ -->
		<tr>
		<td align="CENTER" bgcolor="#FFFFFF" height="40" valign="MIDDLE" width="200">
		<font color="#0000FF" size="2">
p_nCode &lt; 0
		</font>
		</td>

		<td align="CENTER" bgcolor="#FFFFFF" height="40" valign="MIDDLE" width="300">
		<font color="#0000FF" size="2">
次のフックプロシージャ<br>
に渡す。
		</font>
		</td>
		</tr>

<!-- さかいめ -->
		<tr>
		<td align="CENTER" bgcolor="#FFFFFF" height="40" valign="MIDDLE" width="200">
		<font color="#0000FF" size="2">
p_nCode == HC_NOREMOVE
		</font>
		</td>

		<td align="CENTER" bgcolor="#FFFFFF" height="40" valign="MIDDLE" width="300">
		<font color="#0000FF" size="2">
PeekMessage()がPM_NOREMOVE<br>
付きで呼ばれたとき<br>
		</font>
		</td>
		</tr>

		</tbody></table>

	</td>
	</tr>
	</tbody></table>
</p><p>
	<table cellpadding="0" cellspacing="0" border="0">
	<tbody><tr>
	<td align="LEFT" valign="TOP" width="600">
	<div class="txt0">
<!-- 表　おわり -->


<img src="%E3%83%AD%E3%83%BC%E3%82%AB%E3%83%AB%E3%83%95%E3%83%83%E3%82%AF_files/0702.gif" alt="フックチェーン" align="RIGHT" border="0" height="310" width="250">

　さて、このふたつの場合には<strong>CallNextHookEx()</strong>を呼び出します。これは<strong>次のフックを呼び出す</strong>関数で、このフックをすぐ呼び出すということは、すなわち「何もしない」ということです。<br>
　複数のフックがセットされた場合、フックプロシージャはそれぞれが個別に呼ばれるわけではなく、<strong>フックプロシージャ上を橋渡ししていく形で呼ばれる</strong>ことになっています。この仕組みはよくＳＣＳＩのデイジーチェーンに似ていると言われます。<br>
　そしてＳＣＳＩと同じように、<strong>どこかが途切れて</strong>しまうと、そのあとのフックプロシージャは<strong>呼ばれなくなってしまいます</strong>。ローカルフックの場合には自分のアプリが動かなくなるだけで済みますが、<strong>システムフックの場合には他のフックを殺してしまう</strong>という問題が発生します。そのためにも、この<strong>CallNextHookEx()</strong>の呼び出しは<font color="#FF0000"><strong>必ずする必要があります</strong></font>。<br>
　また、このとき第１引数に<font color="#FF0000"><strong>フックハンドルを渡す</strong></font>ということが重要です。フックプロシージャが<strong>return</strong>で終了したときに、ひとつ前のフックプロシージャの<strong>CallNextHookEx()</strong>へと戻る必要があります。ここでフックハンドルを渡していないと<strong>戻れなくなってしまいます</strong>。これも他のフックを殺す原因になってしまうので注意してください。<br>
<font color="#FF0000" size="2"><strong>（「うちかぶ１．０」および「たすかぶ２．０」のバグはこれが原因でした（汗）。このページを参考にしてた方、ご注意を）</strong></font><br>
<p>
　このあと、<strong>p_lParam</strong>の値もチェックします。<strong>KeyboardProc()</strong>での値の意味は<strong>「キー入力がどういう状況か」</strong>というものです。この値の３２ビット目が１（つまり４バイト目が<strong>0x80</strong>）ならキーを離したときという意味です。このフラグによって、あとで送信するメッセージを変更します。<br>
　今回は「ひとつキーを進める」ということだったので、キーが入っている<strong>p_wParam</strong>をインクリメントします。<br>
　そのあと<strong>PostMessage()</strong>でキーを送ります。一見「永久ループになるんとちゃう？」と思われますが、どうやら「実際にキー入力した時のメッセージ」でないとフックプロシージャは呼ばれないので大丈夫です。それに、メッセージキューが空の場合には、フックプロシージャが呼ばれたあとに<strong>GetMessage()</strong>等が呼ばれますので、これは当然メッセージプロシージャに送られません。<br>
</p><p>
　「このプログラムでの処理」を終えたら、こちらのメッセージも次のフックプロシージャに送っておきます。<br>
　最後に戻り値です。キーボードプロシージャの場合、この値を<strong>ゼロ</strong>にすると、このとき取得したメッセージをメッセージキューから<strong>削除</strong>します。今回は先ほど代わりのメッセージを送ってあるので、ゼロにして値を返さないようにします。<br>
　削除しない場合には、基本的に<strong>CallNextHookEx()</strong>の戻り値を返します。このＡＰＩの戻り値は<strong>呼び出したフックプロシージャの戻り値</strong>なので、この値をさらに返していくことで、戻り値もフックプロシージャを橋渡しさせていくことになります。<br>
</p><p>
　以上をまとめましょう。<br>
　重要なのは<font color="#0000FF"><strong>必ずCallNextHookEx()を呼ぶ</strong></font>ことです。このとき<font color="#0000FF"><strong>フックハンドルを渡す</strong></font>ことを忘れずに。<br>
　それ以外は基本的に<strong>好きにしていい</strong>でしょう。今回はくだらないことをしていますが、アイディア次第で色々なことができるでしょう。<br>
　ただ、実際に「したいこと」があったとしても、そのためにどういうプログラムを組めばいいのかというのが結構難しいと思います。デバッガを駆使してがんばってください。<br>


	</p></div>
	</td>
	</tr>
	</tbody></table>
	</p><p>	
	<table cellpadding="0" cellspacing="0" border="0">
	<tbody><tr>
	<td align="LEFT" valign="TOP" width="600">
	<div class="txt0">
	<font color="#FF0000" size="4">
	<strong>
フックを外す<br>
	</strong>
	</font>

　最後に後始末をしましょう。例によって「メンバ関数の追加」ダイアログで次の関数を作製してください。<br>


<!-- 表 -->
	</div>
	</td>
	</tr>
	</tbody></table>
</p><p>
	<table cellpadding="0" cellspacing="0" border="0">
	<tbody><tr>
	<td align="CENTER" bgcolor="#FFCCCC" height="80" valign="MIDDLE" width="320">
		 
		 <table cellpadding="0" cellspacing="3" border="0">
		 
		 

		<tbody><tr>
		<td align="CENTER" bgcolor="#FFFFCC" height="30" valign="MIDDLE" width="100">
		<font color="#0000FF" size="2">
関数の型
		</font>
		</td>

		<td align="CENTER" bgcolor="#FFFFCC" height="30" valign="MIDDLE" width="100">
		<font color="#0000FF" size="2">
関数の宣言
		</font>
		</td>

		<td align="CENTER" bgcolor="#FFFFCC" height="30" valign="MIDDLE" width="100">
		<font color="#0000FF" size="2">
アクセス制御
		</font>
		</td>
		</tr>

<!-- さかいめ -->
		<tr>
		<td align="CENTER" bgcolor="#FFFFFF" height="30" valign="MIDDLE" width="100">
		<font color="#0000FF" size="2">
BOOL
		</font>
		</td>

		<td align="CENTER" bgcolor="#FFFFFF" height="30" valign="MIDDLE" width="100">
		<font color="#0000FF" size="2">
Release()
		</font>
		</td>

		<td align="CENTER" bgcolor="#FFFFFF" height="30" valign="MIDDLE" width="100">
		<font color="#0000FF" size="2">
Public
		</font>
		</td>
		</tr>

		</tbody></table>

	</td>
	</tr>
	</tbody></table>
</p><p>
	<table cellpadding="0" cellspacing="0" border="0">
	<tbody><tr>
	<td align="LEFT" valign="TOP" width="600">
	<div class="txt0">
<!-- 表　おわり -->

　ほとんど<strong>CKeyboardHook::Set()</strong>と同じなので問題ないでしょう。では、作製した関数に次のコードを書き加えてください。<br>

<!-- コード -->
	</div>
	</td>
	</tr>
	</tbody></table>
	</p></center>
	<p>
	<font color="#0000FF">
	</font></p><pre><!-- コード開始 --><font color="#0000FF">
BOOL CKeyboardHook::Release()
{
	BOOL bRes;

	if( m_hHook )
		bRes = ::UnhookWindowsHookEx( m_hHook );

	m_hHook = NULL;
	return bRes;
}
	</font></pre><font color="#0000FF">		<!-- コード　ここまで -->
	</font>
	<p>
	</p><center>
	<table cellpadding="0" cellspacing="0" border="0">
	<tbody><tr>
	<td align="LEFT" valign="TOP" width="600">
	<div class="txt0">
<!-- コード　おわり -->

　さらに、デストラクタに次のコードを書き込んでください。<br>

<!-- コード -->
	</div>
	</td>
	</tr>
	</tbody></table>
	</center>
	<p>
	<font color="#0000FF">
	</font></p><pre><!-- コード開始 --><font color="#0000FF">
CKeyboardHook::~CKeyboardHook()
{
	Release();
}
	</font></pre><font color="#0000FF">		<!-- コード　ここまで -->
	</font>
	<p>
	</p><center>
	<table cellpadding="0" cellspacing="0" border="0">
	<tbody><tr>
	<td align="LEFT" valign="TOP" width="600">
	<div class="txt0">
<!-- コード　おわり -->

　<strong>UnhookWindowsHookEx()</strong>を使用して、フックを外します。クラスを便利にするために、デストラクタで自動的に呼ばれるようにしました。この辺は難しい部分はないでしょう。<br>



	</div>
	</td>
	</tr>
	</tbody></table>
	<p>	
	<table cellpadding="0" cellspacing="0" border="0">
	<tbody><tr>
	<td align="LEFT" valign="TOP" width="600">
	<div class="txt0">
	<font color="#FF0000" size="4">
	<strong>
フッククラスの使用方法<br>
	</strong>
	</font>

　では実際に使ってみましょう。今回はダイアログベースのアプリケーションを作製しているので、それを踏まえて書き換えていってください。<br>
　まずもともとある<strong>CWinApp派生クラス</strong>と<strong>CDialog派生クラス</strong>の<strong>ソースファイル（拡張子がcppのファイル）</strong>の最初の方に、次の１行を追加してください。<br>

<!-- コード -->
	</div>
	</td>
	</tr>
	</tbody></table>
	</p></center>
	<p>
	<font color="#0000FF">
	</font></p><pre><!-- コード開始 --><font color="#0000FF">
#include "stdafx.h"		//この次の行にね。
#include "CKeyboardHook.h"	//この行を追加。
	</font></pre><font color="#0000FF">		<!-- コード　ここまで -->
	</font>
	<p>
	</p><center>
	<table cellpadding="0" cellspacing="0" border="0">
	<tbody><tr>
	<td align="LEFT" valign="TOP" width="600">
	<div class="txt0">
<!-- コード　おわり -->

　ダイアログクラスのヘッダーファイルを読み込んでいるソースファイルはすべて書き加えてください。<br>
　次にそのダイアログクラスのメンバ変数として、先ほど作製した<strong>CKeyboardHookクラス</strong>の変数を作製します。例によって<strong>CDialog派生クラス</strong>を右クリックして「メンバ変数の作製」を選び、次の変数を作製してください。<br>




<!-- 表 -->
	</div>
	</td>
	</tr>
	</tbody></table>
<p>
	<table cellpadding="0" cellspacing="0" border="0">
	<tbody><tr>
	<td align="CENTER" bgcolor="#FFCCCC" height="80" valign="MIDDLE" width="320">
		 
		 <table cellpadding="0" cellspacing="3" border="0">
		 
		 

		<tbody><tr>
		<td align="CENTER" bgcolor="#FFFFCC" height="30" valign="MIDDLE" width="100">
		<font color="#0000FF" size="2">
変数の型
		</font>
		</td>

		<td align="CENTER" bgcolor="#FFFFCC" height="30" valign="MIDDLE" width="100">
		<font color="#0000FF" size="2">
変数の宣言
		</font>
		</td>

		<td align="CENTER" bgcolor="#FFFFCC" height="30" valign="MIDDLE" width="100">
		<font color="#0000FF" size="2">
アクセス制御
		</font>
		</td>
		</tr>

<!-- さかいめ -->
		<tr>
		<td align="CENTER" bgcolor="#FFFFFF" height="30" valign="MIDDLE" width="100">
		<font color="#0000FF" size="2">
CKeyboardHook
		</font>
		</td>

		<td align="CENTER" bgcolor="#FFFFFF" height="30" valign="MIDDLE" width="100">
		<font color="#0000FF" size="2">
m_cKeyHook
		</font>
		</td>

		<td align="CENTER" bgcolor="#FFFFFF" height="30" valign="MIDDLE" width="100">
		<font color="#0000FF" size="2">
Private
		</font>
		</td>
		</tr>

		</tbody></table>

	</td>
	</tr>
	</tbody></table>
</p><p>
	<table cellpadding="0" cellspacing="0" border="0">
	<tbody><tr>
	<td align="LEFT" valign="TOP" width="600">
	<div class="txt0">
<!-- 表　おわり -->

　そのあと、ダイアログクラスの<strong>OnInitDialog()</strong>が最初からあると思うので、その後半部分に次のコードを書き込んでください。<br>



<!-- コード -->
	</div>
	</td>
	</tr>
	</tbody></table>
	</p></center>
	<p>
	<font color="#0000FF">
	</font></p><pre><!-- コード開始 --><font color="#0000FF">
BOOL CMyDlg::OnInitDialog()
{
	CDialog::OnInitDialog();

	// このダイアログ用のアイコンを設定します。フレームワークはアプリケーションのメイン
	// ウィンドウがダイアログでない時は自動的に設定しません。
	SetIcon(m_hIcon, TRUE);			// 大きいアイコンを設定
	SetIcon(m_hIcon, FALSE);		// 小さいアイコンを設定
	
	//////////////////////////////////
	//　フックのセット。
	m_cKeyHook.Set();	//この行を追加してください。

	return TRUE;  // TRUE を返すとコントロールに設定したフォーカスは失われません。
}
	</font></pre><font color="#0000FF">		<!-- コード　ここまで -->
	</font>
	<p>
	</p><center>
	<table cellpadding="0" cellspacing="0" border="0">
	<tbody><tr>
	<td align="LEFT" valign="TOP" width="600">
	<div class="txt0">
<!-- コード　おわり -->


　はい、お疲れさま。コーディングはここまでです。ビルドしたあと実行して、エディットボックスで文字を入力してみてください。ちゃんとフックが効いているのが分かると思います。<br>


	</div>
	</td>
	</tr>
	</tbody></table>
	<p>	
	<table cellpadding="0" cellspacing="0" border="0">
	<tbody><tr>
	<td align="LEFT" valign="TOP" width="600">
	<div class="txt0">
	<font color="#FF0000" size="4">
	<strong>
まとめ<br>
	</strong>
	</font>

　で、実際に使ってみると<strong>思いの外難しい</strong>ということが分かると思います。<br>
　フックを使うだけならなんの問題もないんですが、それをどう処理するか、ということがやっかいになってきます。例えば今回の場合には、デリートキー等が
効かなくなってしまうので、その辺の処理をしなければなりません。こういった細かな処理を組み込んでやらないと、うまく働かなくなってしまいます。<br>
　また、今回以外の処理や、他のフックを使用した場合には、その都度、色々とテストしなければならないでしょう。どんな時にどういうメッセージが送られて
くるのか、どのメッセージを削除して、どんなメッセージをどのウィンドウへと送ればいいのか……そういったテストを入念に繰り返す必要が出てくると思いま
す。<br>
　それでも楽な方です。自分の作ったアプリケーションに使用するんですから。<br>
<p>
　というわけで次回は、茨の道を突き進むあなたに送る「システムフック」です。<br>





<!-- 本文おわり -->
	</p></div>
	</td>
	</tr>
	</tbody></table>
	</p></center>







	<div align="RIGHT">
<!-- Next and Prev
　ＪＡＶＡスクリプトを使って、次のＵＲＬを計算させます。
-->
＜<a href="http://www.kab-studio.biz/Programing/Codian/DLL_Hook_SClass/06.html">前</a>｜<a href="http://www.kab-studio.biz/Programing/Codian/DLL_Hook_SClass/08.html">次</a>＞
	</div>


<!-- ちょさくけん -->
<table cellpadding="3" cellspacing="0" border="0">
<tbody><tr><td align="LEFT" bgcolor="#FFFF00" width="2500">
<font size="2"><em><strong>
<a href="http://www.kab-studio.biz/" target="_top">(C)KAB-studio 1998 ALL RIGHTS RESERVED.</a>
</strong></em></font>
</td></tr>
</tbody></table>
<!-- ちょさくけん　ここまで -->




</body></html>